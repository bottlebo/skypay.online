// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SkyPay.Data;
using SkyPay.Models;
using System;

namespace SkyPay.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180407113336_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SkyPay.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Address1");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Contact")
                        .HasMaxLength(100);

                    b.Property<string>("Email");

                    b.Property<string>("INN")
                        .HasMaxLength(12);

                    b.Property<string>("KPP")
                        .HasMaxLength(9);

                    b.Property<int>("NDS");

                    b.Property<string>("Name");

                    b.Property<string>("OGRN")
                        .HasMaxLength(13);

                    b.Property<DateTime?>("OgrnDate");

                    b.Property<string>("Phone");

                    b.Property<int>("Type");

                    b.Property<int>("sob");

                    b.Property<string>("web")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("SkyPay.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<bool>("HasChild");

                    b.Property<string>("Name");

                    b.Property<int?>("parentId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SkyPay.Models.CategoryProps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.Property<int>("categoryId");

                    b.HasKey("Id");

                    b.HasIndex("categoryId");

                    b.ToTable("CategoryProps");
                });

            modelBuilder.Entity("SkyPay.Models.CategoryPropsValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.Property<int>("categoryPropsId");

                    b.Property<int>("productId");

                    b.HasKey("Id");

                    b.HasIndex("categoryPropsId");

                    b.HasIndex("productId");

                    b.ToTable("CategoryPropsValues");
                });

            modelBuilder.Entity("SkyPay.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Address1");

                    b.Property<string>("Contact")
                        .HasMaxLength(100);

                    b.Property<string>("Email");

                    b.Property<string>("INN")
                        .HasMaxLength(12);

                    b.Property<string>("KPP")
                        .HasMaxLength(9);

                    b.Property<int>("NDS");

                    b.Property<string>("Name");

                    b.Property<string>("OGRN")
                        .HasMaxLength(13);

                    b.Property<DateTime?>("OgrnDate");

                    b.Property<string>("Phone");

                    b.Property<int>("sob");

                    b.Property<string>("web")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SkyPay.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AgentId");

                    b.Property<DateTime>("DocumentDate");

                    b.Property<bool>("Locked");

                    b.Property<bool>("Private");

                    b.Property<int>("StockId");

                    b.Property<int>("Type");

                    b.Property<decimal>("makrkup");

                    b.Property<int>("nds");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("StockId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SkyPay.Models.DocumentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DocumentId");

                    b.Property<decimal>("InputPrice");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("Qty");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProductId");

                    b.ToTable("DocumentItems");
                });

            modelBuilder.Entity("SkyPay.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarCode");

                    b.Property<string>("Name");

                    b.Property<string>("VendorCode");

                    b.Property<bool>("Weighing");

                    b.Property<int>("categoryId");

                    b.Property<int>("unitId");

                    b.HasKey("Id");

                    b.HasIndex("categoryId");

                    b.HasIndex("unitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SkyPay.Models.ProductInStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("OutputPrice");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("Qty");

                    b.Property<int>("StockId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockId");

                    b.ToTable("ProductsInStock");
                });

            modelBuilder.Entity("SkyPay.Models.ProductProps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.Property<int>("Type");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductProps");
                });

            modelBuilder.Entity("SkyPay.Models.ProductSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarCode");

                    b.Property<bool>("ByCash");

                    b.Property<string>("Name");

                    b.Property<string>("VendorCode");

                    b.Property<int>("categoryId");

                    b.HasKey("Id");

                    b.HasIndex("categoryId");

                    b.ToTable("ProductsSets");
                });

            modelBuilder.Entity("SkyPay.Models.ProductSetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductId");

                    b.Property<int?>("ProductSetId");

                    b.Property<decimal>("Qty");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSetId");

                    b.ToTable("ProductsSetItems");
                });

            modelBuilder.Entity("SkyPay.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("SkyPay.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("SkyPay.Models.Agent", b =>
                {
                    b.HasOne("SkyPay.Models.Company", "Company")
                        .WithMany("Agents")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkyPay.Models.Category", b =>
                {
                    b.HasOne("SkyPay.Models.Company", "Company")
                        .WithMany("Categories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkyPay.Models.CategoryProps", b =>
                {
                    b.HasOne("SkyPay.Models.Category", "Category")
                        .WithMany("CategoryProps")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkyPay.Models.CategoryPropsValues", b =>
                {
                    b.HasOne("SkyPay.Models.CategoryProps", "CategoryProp")
                        .WithMany()
                        .HasForeignKey("categoryPropsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkyPay.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkyPay.Models.Document", b =>
                {
                    b.HasOne("SkyPay.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("SkyPay.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkyPay.Models.DocumentItem", b =>
                {
                    b.HasOne("SkyPay.Models.Document", "Document")
                        .WithMany("Items")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkyPay.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkyPay.Models.Product", b =>
                {
                    b.HasOne("SkyPay.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkyPay.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("unitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkyPay.Models.ProductInStock", b =>
                {
                    b.HasOne("SkyPay.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkyPay.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkyPay.Models.ProductProps", b =>
                {
                    b.HasOne("SkyPay.Models.Product", "Product")
                        .WithMany("ProductProps")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkyPay.Models.ProductSet", b =>
                {
                    b.HasOne("SkyPay.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkyPay.Models.ProductSetItem", b =>
                {
                    b.HasOne("SkyPay.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkyPay.Models.ProductSet", "ProductSet")
                        .WithMany("ProductSetItems")
                        .HasForeignKey("ProductSetId");
                });

            modelBuilder.Entity("SkyPay.Models.Stock", b =>
                {
                    b.HasOne("SkyPay.Models.Company", "Company")
                        .WithMany("Stocks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
